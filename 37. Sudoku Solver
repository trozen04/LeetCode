class Solution {
    public void solveSudoku(char[][] board) {
        solve(board, 0 , 0);
    }
    boolean solve(char[][] board, int row, int col){
        if(row == board.length) return true;
        if(col == board[0].length) return solve(board, row+1, 0);
        if(board[row][col] != '.') return solve(board, row, col+1);

        for(char ch = '1'; ch <= '9'; ch++){
            if(valid(board, row, col, ch)){
                board[row][col] = ch;

                if(solve(board, row, col+1)) return true;

                board[row][col] = '.';
            }
        }
        return false;
    }
    
    boolean valid(char[][] board, int row, int col, char ch){
        for(int i = 0; i < board.length; i++){
            if(board[i][col] == ch) return false;
            if(board[row][i] == ch) return false;

            int r = 3 * (row/3) + i / 3;
            int c = 3 * (col/3) + i % 3;

            if(board[r][c] == ch) return false;
        }
        return true;
    }
}
