/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public String reverse(ListNode root){
        String str = "";
        while(root != null){
           
        }

        return str;
    }
    public ListNode doubleIt(ListNode head) {
        String str = "";
        ArrayList<String> list = new ArrayList<>();
        while(head != null){
            str += head.val;
            head = head.next;
        }
        str = helper(str);
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        for(int i = 0; i < str.length(); i++){
            int num = str.charAt(i) - '0';
            curr.next = new ListNode(num);
            curr = curr.next;
        }
        return dummy.next;
    }
    public String helper(String str){
        String res = "";
        int carry = 0;
        for(int i = str.length()-1; i >= 0; i--){
            int sum = 2 * (str.charAt(i) - '0') + carry;
            res = sum % 10 + res;
            carry = sum / 10;
        }
        if(carry > 0){
            res = carry + res;
        }
        System.out.println("Str = " + res);
        return res;
       
    }
}
