class Solution {
    public int totalNQueens(int n) {
        int[] result = {0};
        char[][] board = new char[n][n];
        helper(board, result, 0);
        return result[0];
    }
    public void helper(char[][] board, int[] result, int col){
        if(col == board.length){
            result[0]++;
            return;
        }
        
        for(int row = 0; row < board.length; row++){
            if(isSafe(row, col, board)){
                board[row][col] = 'Q';
                helper(board, result, col+1);
                board[row][col] = '.';
            }
        }
    }
    public boolean isSafe(int row, int col, char[][] board){
        for(int i = 0; i < board.length; i++){
            if(board[row][i] == 'Q') return false;
        }
        for(int i = 0; i < board[0].length; i++){
            if(board[i][col] == 'Q') return false;
        }
        int i = row;
        for(int j = col; i >= 0 && j >= 0; i--,j--){
            if(board[i][j] == 'Q') return false;
        }
        i = row;
        for(int j = col; i >= 0 && j < board.length; i--, j++){
            if(board[i][j] == 'Q') return false;
        }
        i = row;
        for(int j = col; i < board.length && j >= 0; i++, j--){
            if(board[i][j] == 'Q') return false;
        }
        i = row;
        for(int j = col; i < board.length && j < board.length; i++, j++){
            if(board[i][j] == 'Q') return false;
        }
        return true;
    }
}
